This is a sloppily formatted todo list plucked from the working version of
WeightedAutomaton.py. It excludes various inline TODOs still in that file.

- Add import statements locally to make sure all the native Sage methods i use
  are within scope
- Add examples (and note in docstrings) how to get around the issue of ambiguity
  of strings like '0123' if '12' is a single letter in the alphabet. (Everything
  works if you pass in lists/tuples---just need to be careful to do that.)
- Idea: have a separate PFA class that inherits from WeightedAutomaton? This
  would overload arithmetic operators differently (with more complex operations
  designed to preserve being a PFA). [probably a needless complication.]

- State labels: need to update main constructor to let you pass in if you want, and
  also internal use of constructors should preserve labels.
  Maybe make self.labels a dict, stateindex:'label', empty by default, with only
  labeled states needing to be present among the keys.

TO IMPLEMENT (from old code):
  bruteforce() family of functions
    - Would it be worth it to still keep around versions which only give you
      matrix dicts?
  LOW PRIORITY - autgraph() etc (to create a digraph)
  pathlist()
  pfa2ifs() and friends

- For bruteforce(): allow to specify a range for the coefficients as well as a
  subdivision. Allow options to set single initial and final vectors, with the
  default being to also bruteforce all subdivisions of those.

- Algebraic operations on WAs: "tensor sum" (Paz) - fix

- Constructor from transitions (given as rules, not matrices)
- Also, a version where you can have it fill in the last entry of each row for
  you instead of you having to do it manually.

- Return an equivalent PFA from a given WA, via Turakainen?
- Implement Tseng's algorithm to test for equality of acc.prob. functions of two
  PFAs
- Implement some version (hopefully more efficient) of Tarski's algorithm to be
  able to compute A_P or A_{P,\delta}?
